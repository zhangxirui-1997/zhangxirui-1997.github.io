<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020年1月最后十天的计划</title>
    <link href="/2021/01/19/2020%E5%B9%B41%E6%9C%882%E6%9C%88%E8%AE%A1%E5%88%92/"/>
    <url>/2021/01/19/2020%E5%B9%B41%E6%9C%882%E6%9C%88%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Monthly plan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Plan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin语法学习</title>
    <link href="/2021/01/18/Kotlin%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/18/Kotlin%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>毕设是做一款APP，当时kotlin就已经出了，我用Java开发的比较多，所以使用Java开发。之前就想学习一下Kotlin，但是一拖再拖，正好再过几个月又有个比赛，这次决心搞一搞。</p><blockquote><p>Kotlin是一由JetBrains开发可用于现代多平台应用的静态编程语言。Kotlin可以编译成Java字节码和JavaScript与Java代码相互运作，并可以重复使用如Java集合框架等的现有Java引用的函数。Kotlin已正式成为Android官方支持开发语言。</p></blockquote><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    println(<span class="hljs-string">&quot;Hello world!&quot;</span>)     <span class="hljs-comment">//打印</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>      <span class="hljs-comment">//变量variable</span><br>    <span class="hljs-keyword">val</span> b = <span class="hljs-number">10</span>      <span class="hljs-comment">//定量value</span><br>    <span class="hljs-keyword">val</span> a1:<span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span>      <span class="hljs-comment">//显示声明数据类型</span><br>    println(<span class="hljs-string">&quot;a = &quot;</span>+ a )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出字符的小技巧</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-comment">// 模板中的简单名称：</span><br><span class="hljs-keyword">val</span> s1 = <span class="hljs-string">&quot;a is <span class="hljs-variable">$a</span>&quot;</span> <br><br>a = <span class="hljs-number">2</span><br><span class="hljs-comment">// 模板中的任意表达式：</span><br><span class="hljs-keyword">val</span> s2 = <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;s1.replace(<span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;was&quot;</span>)&#125;</span>, but now is <span class="hljs-variable">$a</span>&quot;</span><br><br><span class="hljs-comment">//结果  a was 1, but now is 2</span><br></code></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//函数示例1</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largenumber1</span><span class="hljs-params">(x1:<span class="hljs-type">Int</span>,x2:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> max(x1,x2)<br>&#125;<br><span class="hljs-comment">//函数示例2</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largernumber2</span><span class="hljs-params">(x1: <span class="hljs-type">Int</span>,x2: <span class="hljs-type">Int</span>)</span></span>= max(x1,x2)      <span class="hljs-comment">//Kotlin具有出色的类型推导机制</span><br><br></code></pre></td></tr></table></figure><h2 id="选择if-amp-when"><a href="#选择if-amp-when" class="headerlink" title="选择if &amp; when"></a>选择if &amp; when</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//Kotlin的选择有两种，if和when</span><br><span class="hljs-comment">//if选择示例1</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largernumber3</span><span class="hljs-params">(x1: <span class="hljs-type">Int</span>,x2: <span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span>&#123;<br>    <span class="hljs-keyword">var</span> number=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (x1&gt;x2)&#123;<br>        number=x1<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        number=x2<br>    &#125;<br>    <span class="hljs-keyword">return</span> number<br>&#125;<br><span class="hljs-comment">//if选择示例2</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largernumber4</span><span class="hljs-params">(x1: <span class="hljs-type">Int</span>,x2: <span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (x1&gt;x2)&#123;      <span class="hljs-comment">//这一步可以进一步的缩写，变成下面的形式</span><br>        x1<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        x2<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">largernumber5</span><span class="hljs-params">(x1: <span class="hljs-type">Int</span>,x2: <span class="hljs-type">Int</span>)</span></span>=<span class="hljs-keyword">if</span> (x1&gt;x2) x1 <span class="hljs-keyword">else</span> x2<br><br><span class="hljs-comment">//when选择示例1</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore1</span><span class="hljs-params">(name:<span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">when</span>(name)&#123;      <span class="hljs-comment">//when传入参数可以直接进行匹配</span><br>        <span class="hljs-string">&quot;Tom&quot;</span> -&gt;<span class="hljs-number">86</span><br>        <span class="hljs-string">&quot;Jim&quot;</span> -&gt;<span class="hljs-number">77</span><br>        <span class="hljs-keyword">else</span>-&gt;<span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//when选择示例2</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getScore2</span><span class="hljs-params">(name:<span class="hljs-type">String</span>)</span></span>:<span class="hljs-built_in">Int</span> =<span class="hljs-keyword">when</span>&#123;       <span class="hljs-comment">//when不传入参数可以写一个判断语句</span><br>    name.startsWith(<span class="hljs-string">&quot;Tom&quot;</span>) -&gt;<span class="hljs-number">86</span><br>    name==<span class="hljs-string">&quot;Jim&quot;</span> -&gt;<span class="hljs-number">77</span><br>    <span class="hljs-keyword">else</span>-&gt;<span class="hljs-number">0</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//循环</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">againandagain</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">val</span> range1 =<span class="hljs-number">0.</span><span class="hljs-number">.10</span>    <span class="hljs-comment">//表示0到10的闭区间  [0,10]</span><br>    <span class="hljs-keyword">val</span> range2 =<span class="hljs-number">0</span> until <span class="hljs-number">10</span>      <span class="hljs-comment">//示0到10的左闭右开区间  [0,10)</span><br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> range1) println(i)<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until <span class="hljs-number">10</span> step <span class="hljs-number">2</span>) println(i)       <span class="hljs-comment">//[0,10)上遍历每次递增2</span><br>    <span class="hljs-comment">//结果 0 2 4 6 8</span><br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> downTo <span class="hljs-number">1</span>) println(i)       <span class="hljs-comment">//[10,1]的降序区间</span><br>    <span class="hljs-comment">//结果 10 9 8 7 6 5 4 3 2 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><blockquote><p>Java中继承是extends，实现接口是implements，而Kotlin中统一使用冒号</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;      <span class="hljs-comment">//普通类</span><br>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">var</span> age=<span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        println(name+<span class="hljs-string">&quot;is eating!&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;         <span class="hljs-comment">//类调用</span><br>    <span class="hljs-keyword">val</span> p=Person()<br>    p.name=<span class="hljs-string">&quot;zhang&quot;</span><br>    p.age=<span class="hljs-number">22</span><br>    p.eat()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>() &#123;       <span class="hljs-comment">//加open之后才可以被继承</span><br>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">var</span> age=<span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        println(name+<span class="hljs-string">&quot;is eating!&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>(<span class="hljs-keyword">val</span> sno:String ,<span class="hljs-keyword">val</span> grade : <span class="hljs-built_in">Int</span>) : Person() &#123;     <span class="hljs-comment">//带初始化参数的子类</span><br>    <span class="hljs-keyword">init</span> &#123;      <span class="hljs-comment">//构造函数</span><br>        println(<span class="hljs-string">&quot;sno is&quot;</span>+sno)<br>        println(<span class="hljs-string">&quot;grade is&quot;</span>+grade)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">val</span> student=Student(<span class="hljs-string">&quot;zhang&quot;</span>,<span class="hljs-number">22</span>)     <span class="hljs-comment">//调用</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>之前在写Android的时候，没有系统的学习过Java这门语言，所以基础不是特别扎实，仅仅处于会用的阶段，接口也不是很了解，所以在此先复习一下Java接口的知识。Kotlin的接口和Java的接口几乎等同。</p><blockquote><p>接口 interface<br>在Java中接口就是为所有的任务类型提供了一种规范或者说是标准，意思是只要你的任务符合这个标准，我的程序就可以处理。<br>PetRestaurant dog = new DogPet(); //实例化一个狗，相当于把狗顾客实例化<br>PetRestaurant cat = new CatPet();//实例化一个猫，相当于把猫顾客实例化<br>然后可以对PetRestaurant进行统一处理，因为不管是猫还是狗都符合我们设计的接口规范。假如没有接口会怎么办，来一个猫要去创造一个猫，还要实例化，来一只狗要创建一只狗，同样要实例化，还要配备专门的店小二去接待，就会相当麻烦。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyInterface</span> </span>&#123;     <span class="hljs-comment">//声明一个接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span>    <span class="hljs-comment">// 没有默认实现的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;  <span class="hljs-comment">//已经默认实现的方法</span><br>      <span class="hljs-comment">// 可选的方法体</span><br>      println(<span class="hljs-string">&quot;foo&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> : <span class="hljs-type">MyInterface &#123;     //实现接口的类</span></span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;        <span class="hljs-comment">//由于bar()函数没有默认实现，所以在类中必须手动实现，而foo函数有默认实现，可以不在类中实现</span><br>    ......<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;     <span class="hljs-comment">//主函数中调用</span><br>    <span class="hljs-keyword">val</span> c =  Child()<br>    c.foo();<br>    c.bar();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据类"><a href="#数据类" class="headerlink" title="数据类"></a>数据类</h2><p>数据类通常要重写equals(),hashCode(),toString()三个方法，这三个方法在Kotlin中非常容易实现，只需要一个关键字！</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">data <span class="hljs-keyword">class</span> <span class="hljs-symbol">Cellphone</span>(<span class="hljs-symbol">val</span> <span class="hljs-symbol">brand:<span class="hljs-symbol">String</span>,<span class="hljs-symbol">val</span></span> <span class="hljs-symbol">price:<span class="hljs-symbol">Double</span></span>)<br>//在类前面声明了<span class="hljs-symbol">data</span>关键字，就表明这个类是数据类，会自动实现上述的三个方法<br></code></pre></td></tr></table></figure><h2 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h2><blockquote><p>单例类用于避免创建重复的对象</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Singleton&#123;   <span class="hljs-comment">//即可构建一个单例类</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">singletonTest</span><span class="hljs-params">()</span></span>&#123;<br>        println(<span class="hljs-string">&quot;singletonTest is called.&quot;</span>)<br>    &#125;<br>&#125;<br><br>Singleton.sinletonTest()        <span class="hljs-comment">//调用单例类</span><br></code></pre></td></tr></table></figure><h1 id="Lambda编程"><a href="#Lambda编程" class="headerlink" title="Lambda编程"></a>Lambda编程</h1><blockquote><p>Lambda就是一小段可以作为参数传递的代码，目前暂时没有接触到，日后再说</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Android development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Octave的基本学习</title>
    <link href="/2021/01/17/Octave%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/17/Octave%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>在导师的指导下学习了吴恩达老师机器学习入门课，在课程中涉及了Octave，感觉在以后的学习中还是很重要的，所以认真总结一下很有必要。</p><blockquote><p>Octave是一种编程语言，旨在解决线性和非线性的数值计算问题。</p></blockquote><h1 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs matlab">注意：注释是 <span class="hljs-comment">% </span><br>    不等于是 ~=<br>a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">2</span><br>a+b     <span class="hljs-comment">%加</span><br>a-b     <span class="hljs-comment">%减</span><br>a/b     <span class="hljs-comment">%除</span><br>a*b     <span class="hljs-comment">%乘</span><br>a^b     <span class="hljs-comment">%指数，a的b次方</span><br>a == b      <span class="hljs-comment">%a等于b吗</span><br>a~=b        <span class="hljs-comment">%a不等于b吗</span><br>a&amp;&amp;b        <span class="hljs-comment">%a和b与操作</span><br>a||b        <span class="hljs-comment">%a和b或操作</span><br><span class="hljs-built_in">pi</span>          <span class="hljs-comment">%圆周率</span><br></code></pre></td></tr></table></figure><h1 id="输出操作"><a href="#输出操作" class="headerlink" title="输出操作"></a>输出操作</h1><p>输出</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> a=<span class="hljs-number">3</span><br>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;</span> disp(a) <br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>但是我看网上这个好像也可以</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">disp(sprintf<span class="hljs-comment">(***)</span>)  %c语言语法的sprintf<br></code></pre></td></tr></table></figure><h1 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h1><p>基本原则就是：空格表示同一行的下一个元素，分号表示下一行，第一个索引表示第几行，第二个索引表示第几列</p><h2 id="生成矩阵"><a href="#生成矩阵" class="headerlink" title="生成矩阵"></a>生成矩阵</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">&gt;&gt; <span class="hljs-keyword">A</span>=[<span class="hljs-number">1 2;3 4</span><span class="hljs-comment">;5 6]      %不会自动补零，只能手动输入</span><br><span class="hljs-keyword">A</span> =<br>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span><br>   <span class="hljs-number">3</span>   <span class="hljs-number">4</span><br>   <span class="hljs-number">5</span>   <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> v=<span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0.5</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span>    %<span class="hljs-number">1</span>为起点，<span class="hljs-number">0.1</span>为步长，<span class="hljs-number">2</span>为终点，生成一个一维向量<br>v =<br><br>         <span class="hljs-number">0</span>    <span class="hljs-number">0.5000</span>    <span class="hljs-number">1.0000</span>    <span class="hljs-number">1.5000</span>    <span class="hljs-number">2.0000</span><br><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt; A=ones(2,3)      %生成全是1的矩阵<br>A =<br><br>  <span class="hljs-number"> 1 </span> <span class="hljs-number"> 1 </span>  1<br>  <span class="hljs-number"> 1 </span> <span class="hljs-number"> 1 </span>  1<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt; E=eye(4)         %生成单位矩阵<br>E =<br>Diagonal Matrix     %对角矩阵<br>  <span class="hljs-number"> 1 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  0<br>  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span> <span class="hljs-number"> 0 </span>  0<br>  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span>  0<br>  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  1<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">&gt;&gt; <span class="hljs-keyword">A</span>=rand(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)      %生成随机矩阵，每个元素都在<span class="hljs-number">0</span>~<span class="hljs-number">1</span>之间<br><span class="hljs-keyword">A</span> =<br>   <span class="hljs-number">0.753963</span>   <span class="hljs-number">0.213809</span><br>   <span class="hljs-number">0.210710</span>   <span class="hljs-number">0.708460</span><br>   <span class="hljs-number">0.052734</span>   <span class="hljs-number">0.929088</span><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">&gt;&gt; <span class="hljs-keyword">A</span>=randn(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)     %生成随机矩阵，每个值都满足标准正态分布<br><span class="hljs-keyword">A</span> =<br>   <span class="hljs-number">0.102101</span>   <span class="hljs-number">0.528250</span><br>   <span class="hljs-number">0.794757</span>   <span class="hljs-number">0.047536</span><br>  -<span class="hljs-number">1.024980</span>  -<span class="hljs-number">0.599443</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt; A=magic(3)       %生成幻方/魔术矩阵，使其列的和，行的和，对角线的和都相同<br>A =<br>  <span class="hljs-number"> 8 </span> <span class="hljs-number"> 1 </span>  6<br>  <span class="hljs-number"> 3 </span> <span class="hljs-number"> 5 </span>  7<br>  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 9 </span>  2<br><br>&gt;&gt; A=magic(4)<br>A =<br>  <span class="hljs-number"> 16 </span>  <span class="hljs-number"> 2 </span>  <span class="hljs-number"> 3 </span>  13<br>   <span class="hljs-number"> 5 </span> <span class="hljs-number"> 11 </span> <span class="hljs-number"> 10 </span>   8<br>   <span class="hljs-number"> 9 </span>  <span class="hljs-number"> 7 </span>  <span class="hljs-number"> 6 </span>  12<br>   <span class="hljs-number"> 4 </span> <span class="hljs-number"> 14 </span> <span class="hljs-number"> 15 </span>   1<br></code></pre></td></tr></table></figure><h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><p>A’ 矩阵A的转置矩阵</p><p>假设：A是m*n维矩阵</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-keyword">A</span>*<span class="hljs-number">2</span> 矩阵<span class="hljs-keyword">A</span>中每个元素均乘<span class="hljs-number">2</span><br><span class="hljs-keyword">A</span>+<span class="hljs-number">2</span> 矩阵<span class="hljs-keyword">A</span>中每个元素均加<span class="hljs-number">2</span><br><span class="hljs-keyword">A</span>-<span class="hljs-number">2</span> 矩阵<span class="hljs-keyword">A</span>中每个元素均减<span class="hljs-number">2</span><br><span class="hljs-keyword">A</span>/<span class="hljs-number">2</span> 矩阵<span class="hljs-keyword">A</span>中每个元素均除<span class="hljs-number">2</span><br>log(<span class="hljs-keyword">A</span>) 每个元素都执行log处理<br>exp(<span class="hljs-keyword">A</span>) 每个元素执行exp<br>abs（<span class="hljs-keyword">A</span>） 每个元素的绝对值<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>（<span class="hljs-number">2</span>，：） 这表示第二行的所有元素   <span class="hljs-number">1</span>*n维的向量<br><span class="hljs-attribute">A</span>([<span class="hljs-number">1</span> <span class="hljs-number">3</span>], : ) 表示第一行和第二行所有元素  <span class="hljs-number">2</span>*n矩阵<br><span class="hljs-attribute">A</span>（ ：，<span class="hljs-number">2</span>） 表示A第二列的所有元素，m*<span class="hljs-number">1</span>维向量<br><span class="hljs-attribute">A</span>(:) 这是一个很特别的语法结构 意思是把 A 中的所有元素 放入一个单独的列向量 这样我们就得到了一个 <span class="hljs-number">9</span>×<span class="hljs-number">1</span> 的向量 这些元素都是 A 中的元素排列起来的 <br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt; A = [1 2;<span class="hljs-number"> 3 </span>4;<span class="hljs-number"> 5 </span>6];<br>&gt;&gt; B = [11 12;<span class="hljs-number"> 13 </span>14;<span class="hljs-number"> 15 </span>16];<br>&gt;&gt; C = [A B]        %A和B横着拼在一起<br>C =<br><br>   <span class="hljs-number"> 1 </span>  <span class="hljs-number"> 2 </span> <span class="hljs-number"> 11 </span>  12<br>   <span class="hljs-number"> 3 </span>  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 13 </span>  14<br>   <span class="hljs-number"> 5 </span>  <span class="hljs-number"> 6 </span> <span class="hljs-number"> 15 </span>  16<br><br>&gt;&gt; C = [A; B]       %A和B竖着拼在一起<br>C =<br><br>   <span class="hljs-number"> 1 </span>   2<br>   <span class="hljs-number"> 3 </span>   4<br>   <span class="hljs-number"> 5 </span>   6<br>  <span class="hljs-number"> 11 </span>  12<br>  <span class="hljs-number"> 13 </span>  14<br>  <span class="hljs-number"> 15 </span>  16<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">A =<br>  <span class="hljs-number"> 1 </span>  2<br>  <span class="hljs-number"> 3 </span>  4<br>  <span class="hljs-number"> 5 </span>  6<br>B =<br>  <span class="hljs-number"> 11 </span>  12<br>  <span class="hljs-number"> 13 </span>  14<br>  <span class="hljs-number"> 15 </span>  16<br>&gt;&gt; A.*B     %A和B进行点积,每个点做乘积<br>ans =<br>  <span class="hljs-number"> 11 </span>  24<br>  <span class="hljs-number"> 39 </span>  56<br>  <span class="hljs-number"> 75 </span>  96<br></code></pre></td></tr></table></figure><p>A.^2 注意，平方的话需要点积，每个元素都执行平方处理<br>1./A A的每个元素都变成倒数，这里需要点除<br>[value,index] = max(A) 返回每一行的最大值，index为最大值的位置<br>max(A,B) AB同纬度，返回AB矩阵中对应位置最大的值<br>max(A,[],1) A矩阵中，每一列的最大值，1是参数<br>max(A,[],2) A矩阵中，每一行的最大值，2是参数</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">A =<br>  <span class="hljs-number"> 1 </span>  2<br>  <span class="hljs-number"> 3 </span>  4<br>  <span class="hljs-number"> 5 </span>  6<br>&gt;&gt; A&lt;3      %所有满足条件的元素位置设置为1，不满足的为0<br>ans =<br> <span class="hljs-number"> 1 </span> 1<br> <span class="hljs-number"> 0 </span> 0<br> <span class="hljs-number"> 0 </span> 0<br>&gt;&gt; find(A&lt;3)    %打印所有满足条件的索引,注意，这里是把A看成一维向量<br>ans =<br>   1<br>   4<br></code></pre></td></tr></table></figure><p>sum(A，n) 求每一列的和（默认），求每一列的和（n=1）,求每一行的和（n=2）<br>proc（A） 每一列的乘积<br>floor（A） 向下四舍五入<br>ceil（A） 向上四舍五入</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">&gt;&gt; flipud(eye(3))   %将矩阵向上翻转<br>ans =<br>Permutation Matrix<br>  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 0 </span>  1<br>  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span>  0<br>  <span class="hljs-number"> 1 </span> <span class="hljs-number"> 0 </span>  0<br></code></pre></td></tr></table></figure><p>pinv(A) 返回A矩阵的伪逆矩阵，为什么是伪逆矩阵，是因为有的矩阵不是方针，或者不存在逆矩阵</p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> y1 = sin(<span class="hljs-number">2</span>*pi*<span class="hljs-number">4</span>*t);<br><span class="hljs-meta">&gt;&gt;</span> plot(t,y1);  %横轴是 t变量 纵轴是y1 作图<br><span class="hljs-meta">&gt;&gt;</span> hold on;     % 将 新的图像 绘制在 旧的图像 之上<br><span class="hljs-meta">&gt;&gt;</span> plot(t, y2, <span class="hljs-string">&#x27;r&#x27;</span>);    % r表示所使用的颜色 <br><span class="hljs-meta">&gt;&gt;</span> xlabel(<span class="hljs-string">&#x27;time&#x27;</span>)       %坐标轴标签<br><span class="hljs-meta">&gt;&gt;</span> ylabel(<span class="hljs-string">&#x27;value&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;</span> legend(<span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>)     %图例<br><span class="hljs-meta">&gt;&gt;</span> title(<span class="hljs-string">&#x27;my plot&#x27;</span>)     %标题<br><span class="hljs-meta">&gt;&gt;</span> print -dpng <span class="hljs-string">&#x27;myplot.png&#x27;</span>     %保存为png图片<br><span class="hljs-meta">&gt;&gt;</span> close    %让这个图像关掉 <br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;&gt; figure<span class="hljs-comment">(1)</span>; plot<span class="hljs-comment">(t, y1)</span>;<br>&gt;&gt; figure<span class="hljs-comment">(2)</span>; plot<span class="hljs-comment">(t, y2)</span>;<br><span class="hljs-meta">%</span>Octave也可以让你为图像标号,可以指定一个不同的数字编号<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;&gt; subplot<span class="hljs-comment">(1,2,1)</span>;     <br><span class="hljs-meta">%</span>它将图像 分为一个 <span class="hljs-number">1</span>*<span class="hljs-number">2</span>的格子,也就是前两个参数,然后它使用第一个格子,也就是最后一个参数<span class="hljs-number">1</span>的意思 <br>&gt;&gt; plot<span class="hljs-comment">(t, y1)</span>;<br>&gt;&gt; subplot<span class="hljs-comment">(1,2,2)</span>;<br>&gt;&gt; plot<span class="hljs-comment">(t, y2)</span>;<br>&gt;&gt; axis<span class="hljs-comment">([0.5 1 -1 1])</span><br><span class="hljs-meta">%</span> 改变轴的刻度,图中的横轴的范围调整至<span class="hljs-number">0.5</span>到<span class="hljs-number">1</span>,竖轴的范围为<span class="hljs-number">-1</span>到<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;&gt; clf;     <span class="hljs-meta">%</span>清除画布<br>&gt;&gt; A = magic<span class="hljs-comment">(5)</span>;<br>&gt;&gt; imagesc<span class="hljs-comment">(A)</span>       <span class="hljs-meta">%</span>来可视化矩阵 <br>&gt;&gt; imagesc<span class="hljs-comment">(A)</span>, colorbar, colormap gray;<br><span class="hljs-meta">%</span>生成了 一个颜色图像 一个灰度分布图 <br></code></pre></td></tr></table></figure><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs matlab">&gt;&gt; <span class="hljs-keyword">if</span> v(<span class="hljs-number">1</span>)==<span class="hljs-number">1</span>,<br>     <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;The value is one&#x27;</span>);<br>   <span class="hljs-keyword">elseif</span> v(<span class="hljs-number">1</span>) == <span class="hljs-number">2</span>,<br>     <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;The value is two&#x27;</span>);<br>   <span class="hljs-keyword">else</span><br>     <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;The value is not one or two&#x27;</span>);<br>   <span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;&gt; <span class="hljs-attribute">v</span>=zeros(10,1);<br>&gt;&gt; <span class="hljs-keyword">for</span> <span class="hljs-attribute">i</span>=1:10,          %最常见的一种方式<br>     v(i) = 2^i;<br>   end;<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> indices=<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;</span> for i=indices,       %也很常见的一种方式<br>     disp(i);<br>   <span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;&gt; i = <span class="hljs-number">1</span>;<br>&gt;&gt; <span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>,        %<span class="hljs-keyword">while</span>循环，Octave里也有“<span class="hljs-keyword">break</span>” 和“<span class="hljs-keyword">continue</span>” 语句<br>     v(i) = <span class="hljs-number">100</span>;<br>     i = i+<span class="hljs-number">1</span>;<br>   end;<br></code></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>在Octave定义函数,你需要创建一个文件,用你的函数名来命名,然后以.m的后缀结尾。<br>当Octave调用函数时,知道应该在什么位置寻找这个函数的定义</p><p>函数定义如下</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gml">function <span class="hljs-symbol">y</span> = squareThisNumber(<span class="hljs-symbol">x</span>)<br><span class="hljs-symbol">y</span> = <span class="hljs-symbol">x</span>^<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>squareThisNumber是函数名，和文件名保持一致这就告诉 Octave,我想返回一个y值,并且返回的这个值将被存放于变量y里,另外它告诉了Octave这个函数有一个参数,就是参数x,还有定义的函数体,也就是y等于x的平方<br>但是，此时仍然无法调用<br>Octave不知道在哪里找这个文件，所以像之前一样，我们​​使用pwd现在不在我的目录下<br>找目录的方法有两种<br>第一种是比较简单的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-string">&#x27;C:\Users\可可爱爱的的张张张张&#x27;</span><br><span class="hljs-built_in">pwd</span>         %输出当前的路径<br></code></pre></td></tr></table></figure><p>第二种是比较高级的方法<br>将该目录添加到Octave的搜索路径，这样即使你跑到，其他路径底下Octave依然知道在 Users\ang\desktop目录下寻找函数</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">addpath(&#x27;C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\a</span>ng<span class="hljs-symbol">\d</span>esktop&#x27;)         <span class="hljs-variable">%添加路径</span><br></code></pre></td></tr></table></figure><p>Octave 还有一个 其他许多编程语言都没有的概念 那就是它可以 允许你定义一个函数 使得返回值是多个值或多个参数<br>例如：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[y1, y2]</span> = <span class="hljs-title">squareAndCubeThisNumber</span><span class="hljs-params">(x)</span></span><br>y1 = x^<span class="hljs-number">2</span>;<br>y2 = x^<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Machine learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的基本用法</title>
    <link href="/2021/01/10/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <url>/2021/01/10/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>身为一个程序员我怎么可能记不住markdown简单的语法呢</p><p>（好吧，就是记不住）</p><p>为了以后写日志能够方便一点，总结一下markdown语法很有必要</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>几级标题前面几个#，在井号后面加空格再加标题内容</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>换行以后直接开始书写，不用加任何符号。<br>一个段落以一个回车作为换行分隔。</p><h1 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h1><p>倾斜 <em>倾斜</em><br>加粗 <strong>加粗</strong><br>倾斜并加粗 <strong><em>倾斜并加粗</em></strong><br>文字删除线 <del>文字删除线</del></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>import success</p></blockquote><blockquote><p>cout&lt;&lt;”hello world!”<br>cout&lt;&lt;”今天是2021年1月1日”</p></blockquote><h1 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h1><p>连续输入三个以上的 - - - 添加分隔符，下面就会出现一条横线（注意这三个横杠中间是有空格的）。</p><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用 * - + 中的任何一个符号加空格就可以创建无序列表，尤其要注意空格！</p><ul><li>首先</li></ul><ul><li>其次</li></ul><ul><li>最后</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用 数字+点+空格+内容 创建有序列表。</p><ol><li>第一点</li><li>第二点</li></ol><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="www.baidu.com">百度一下，你就知道</a> 这个的形式是下面这样</p><blockquote><p>[百度一下，你就知道] (<a href="http://www.baidu.com/">www.baidu.com</a>)</p></blockquote><p>还可以这样<br>也可以直接用尖括号包含网址的方式&lt;<a href="http://www.baidu.com&gt;来直接构造一个可点击的链接/">www.baidu.com&gt;来直接构造一个可点击的链接</a><br>&lt;<a href="http://www.baidu.com&gt;(如果没有上下文,直接写也ok)/">www.baidu.com&gt;（如果没有上下文，直接写也OK）</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>形式是这样的<br>![图片名称](图片地址)</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>使用 <code> 符号包裹代码构建一个代码块，</code> 符号在左上角esc键下方，请在半角状态输入。一些markdown工具支持更简单的按tab缩进方式。<br>使用<br>```<br>print(“这是一个”)<br>print(“由markdowns标记符构成”)<br>```<br>效果如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;这是一个&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;由markdowns标记符构成&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>使用- |符号把内容分割为你认为合适的表格样式就好。<br>使用:符号标识对齐。</p><p>表头1|表头2|表头3<br>:—-|:—-: |–:<br>左对齐|居中对齐|右对齐<br>（注意冒号的位置，很有趣）<br>表头1|表头2|表头3<br>:—-|:—–:|—–:<br>左对齐|居中对齐|右对齐</p>]]></content>
    
    
    <categories>
      
      <category>Preparation for bolg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
